#!/usr/bin/php
<?php
/******************************************************************************
* AbuseIO 3.0
* Copyright (C) 2015 AbuseIO Development Team (http://abuse.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
*******************************************************************************
*
* This script will allow the scanning of a preset subset of IP addresses or IP 
* ranges based on a config file, asn or netblock argument.
*
******************************************************************************/

include (realpath(dirname(__FILE__))."/../lib/core/loader.php");

$usage  = 'Usage: --asn 666 --range 1.1.1.1/24 --range 2.2.2.2/8 --rbl rblname:/var/rbldnsd/data/rbl1.bla.tld --rbl rblname:rbl2.bla.tld --file file.list' . PHP_EOL;
$usage .= '       example --range 1.1.1.0/24 --rbl Spamhaus:zen.spamhaus.org' . PHP_EOL;

$shortopts = '';
$longopts  = array(
                    'asn:',
                    'rbl:',
                    'range:',
                    'file:',
                 );
$options = getopt($shortopts, $longopts);

if (!empty($options['asn'])) {
    $dns = dns_get_record("as${options['asn']}.ascc.dnsbl.bit.nl", DNS_TXT);
    foreach($dns as $key => $entry) {
        $iplist[] = $entry['entries'][0];
    }

} elseif (!empty($options['range'])) {
    if(is_array($options['range'])) {
        $iplist = $options['range'];
    } else {
        $iplist[] = $options['range'];
    }

} elseif (!empty($options['file'])) {
    if(is_file($options['file'])) {
	$iplist =  file($options['file'], FILE_IGNORE_NEW_LINES);
    }

} else {
    die($usage.PHP_EOL);
}

if (!empty($options['rbl'])) {
    if(is_array($options['rbl'])) {
        foreach($options['rbl'] as $rblpart) {
            $parts = explode(":", $rblpart);
            $rbllist[$parts[0]] = $parts[1];
        }
    } else {
        $parts = explode(":", $options['rbl']);
        $rbllist[$parts[0]] = $parts[1];
    }
}


if(empty($iplist) || !is_array($iplist)) {
    die($usage.PHP_EOL);
}
if(empty($rbllist) || !is_array($rbllist)) {
    die($usage.PHP_EOL);
}

logger(LOG_DEBUG, "RBLSCANNER CLI starting up");

foreach($iplist as $netblock) {
    if(strpos($netblock, "/") != true) {
        // Single IP's we prefix as /32
        $netblock .= "/32";
    }

    $split     = explode("/", $netblock);
    //TODO check split[0] for valid IP first
    $startstop = iprange($split[0], $split[1]);

    $netblocks[$netblock]['range']      = $split[0];
    $netblocks[$netblock]['netmask']    = $split[1];
    $netblocks[$netblock]['begin']      = $startstop['first_ip'];
    $netblocks[$netblock]['end']        = $startstop['last_ip'];
}
unset($iplist);


foreach($netblocks as $netblock => $info) {
    logger(LOG_DEBUG, "RBLSCANNER CLI scanning $netblock");

    foreach($rbllist as $rblname => $rblhost) {

        if(is_file($rblhost)) {
            logger(LOG_DEBUG, "RBLSCANNER CLI start loading rbldnsd zonefile $rblhost");
            $rbldata = parse_zonefile($rblhost);
            logger(LOG_DEBUG, "RBLSCANNER CLI completed loading rbldnsd zonefile $rblhost");
        }

        for($pos = $info['begin']; $pos <= $info['end']; $pos++) {
            $ip = long2ip($pos);
            $ip_reversed = implode('.',array_reverse(preg_split('/\./',$ip)));

            $lookup = $ip_reversed.'.'.$rblhost;

            if(is_file($rblhost)) {
                // Use zone file
                if(in_array($ip, $rbldata)) {

                    $outReport = array(
                        'source'=>$rblname,
                        'ip'=>$ip,
                        'class'=>'RBL Listed',
                        'type'=>'INFO',
                        'timestamp'=>time(),
                        'information'=> array(
                                           'Return code' => '127.0.0.1',
                                             )
                    );

                    if (!reportAdd($outReport)) {
                        die('error adding report'.PHP_EOL);
                    }

		}

            } elseif(dns_get_record($rblhost, DNS_SOA)) {
                // Use DNS queries
                if ($result = gethostbyname($lookup)) {
                    if($result != $lookup) {

                        $outReport = array(
                            'source'=>$rblname,
                            'ip'=>$ip,
                            'class'=>'RBL Listed',
                            'type'=>'INFO',
                            'timestamp'=>time(),
                            'information'=> array(
                                           'Return code' => $result,
                                             )
                        );

                        if (!reportAdd($outReport)) {
                            die('error adding report'.PHP_EOL);
                        }
                    }
                }
            } else {
                logger(LOG_DEBUG, "RBLSCANNER CLI cant detect RBL type");
            }
        }
    }
}
logger(LOG_DEBUG, "RBLSCANNER CLI completed");


function parse_zonefile($file) {
    if(!is_file($file)) {
        return false;
    }

    $rbllist = array();
    $regexp = "";
    $handle = @popen("cat ${file}", "r");
    if ($handle) {
        while (!feof($handle)) {
            $line = str_replace("\n","",fgets($handle, 4096));
            $ip = filter_var($line, FILTER_VALIDATE_IP);
            $rbllist[] = $ip;
        }
    }
    pclose($handle);

    return $rbllist;
}

?>
