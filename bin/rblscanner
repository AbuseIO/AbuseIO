#!/usr/bin/php
<?php
/******************************************************************************
* AbuseIO 3.0
* Copyright (C) 2015 AbuseIO Development Team (http://abuse.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
*******************************************************************************
*
* This script will allow the scanning of a preset subset of IP addresses or IP 
* ranges based on a config file, asn or netblock argument.
*
******************************************************************************/

include (realpath(dirname(__FILE__))."/../lib/core/loader.php");

$usage  = 'Usage: --asn 666 --range 1.1.1.1/24 --range 2.2.2.2/8 --rbl source:zone:/var/rbldnsd/data/rbl1.bla.tld --rbl source:rbl2.bla.tld --file file.list' . PHP_EOL;
$usage .= '       example --range 1.1.1.0/24 --rbl Spamhaus:zen.spamhaus.org' . PHP_EOL;

$shortopts = '';
$longopts  = array(
                    'asn:',
                    'rbl:',
                    'range:',
                    'file:',
                    'debug:',
                 );
$options = getopt($shortopts, $longopts);

if (!empty($options['asn'])) {
    $dns = dns_get_record("as${options['asn']}.ascc.dnsbl.bit.nl", DNS_TXT);
    foreach($dns as $key => $entry) {
        $iplist[] = $entry['entries'][0];
    }

} elseif (!empty($options['range'])) {
    if(is_array($options['range'])) {
        $iplist = $options['range'];
    } else {
        $iplist[] = $options['range'];
    }

} elseif (!empty($options['file'])) {
    if(is_file($options['file'])) {
	$iplist =  file($options['file'], FILE_IGNORE_NEW_LINES);
    }

} else {
    die($usage.PHP_EOL);
}


// build a list with RBL's and their zone(file)
if (!empty($options['rbl'])) {
    if(!is_array($options['rbl'])) {
        $tmp = $options['rbl'];
	$options['rbl'] = array(''=>$tmp);
    }

    foreach($options['rbl'] as $rblpart) {
        $parts = explode(":", $rblpart);

        if(count($parts) == 2) {
            $rbllist[$parts[0]] = array(
                                        'name' => $parts[1],
                                        'zone' => $parts[1],
                                       );
        } elseif(count($parts) == 3) {
            $rbllist[$parts[0]] = array(
                                        'name' => $parts[1],
                                        'file' => $parts[2],
                                       );
        } else {
            die("ERROR: Arguments wrong" .PHP_EOL);
        }
    }
}

if(empty($iplist) || !is_array($iplist)) {
    die($usage.PHP_EOL);
}
if(empty($rbllist) || !is_array($rbllist)) {
    die($usage.PHP_EOL);
}

logger(LOG_DEBUG, "RBLSCANNER CLI starting up");

foreach($iplist as $netblock) {
    if(strpos($netblock, "/") != true) {
        // Single IP's we prefix as /32
        $netblock .= "/32";
    }

    $split     = explode("/", $netblock);
    $startstop = iprange($split[0], $split[1]);

    $netblocks[$netblock]['range']      = $split[0];
    $netblocks[$netblock]['netmask']    = $split[1];
    $netblocks[$netblock]['begin']      = $startstop['first_ip'];
    $netblocks[$netblock]['end']        = $startstop['last_ip'];
}
unset($iplist);

foreach($rbllist as $source => $rbl) {
    logger(LOG_DEBUG, "RBLSCANNER CLI starting with RBL: ${rbl['name']}");

    if(!empty($rbl['file']) && is_file($rbl['file'])) {
        // Walk the RBL file and match each IP to known local IP's
        logger(LOG_DEBUG, "RBLSCANNER CLI using zonefile");

	// Build a cache of local IP's for quick in_array matching
	foreach($netblocks as $netblock => $info) {
            for($pos = $info['begin']; $pos <= $info['end']; $pos++) {
                $ipcache[long2ip($pos)] = '';
            }
	}

        $handle = @popen("cat ${rbl['file']}", "r");
        if ($handle) {
            while (!feof($handle)) {
                $line = str_replace("\n","",fgets($handle, 4096));
                $ip = filter_var($line, FILTER_VALIDATE_IP);

                if (strpos($line, ":127.0.0") !== false) {
                    preg_match('/:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).*/', $line, $match);
                    $code = $match[1];
                }

                if(isset($ipcache[$ip])) {
                    $outReport = array(
                                'source'=>$source,
                                'ip'=>$ip,
                                'class'=>'RBL Listed',
                                'type'=>'INFO',
                                'timestamp'=>time(),
                                'information'=> array(
                                                        'List' => $rbl['name'],
                                                        'Return code' => $code,
                                                     )
                    );

                    if (!reportAdd($outReport)) {
                        logger(LOG_DEBUG, "RBLSCANNER CLI died with: " . implode(",", $outReport));
                        die('error adding report'.PHP_EOL);
                    }
		}
            }
        }
        pclose($handle);

    } else {
        // Resolve each IP by DNS Queries
        logger(LOG_DEBUG, "RBLSCANNER CLI using DNS queries");

        foreach($netblocks as $netblock => $info) {
            logger(LOG_DEBUG, "RBLSCANNER CLI scanning $netblock");

            for($pos = $info['begin']; $pos <= $info['end']; $pos++) {
                $ip = long2ip($pos);
                $ip_reversed = implode('.',array_reverse(preg_split('/\./',$ip)));
                $lookup = $ip_reversed.'.'.$rbl['zone'];

                if(dns_get_record($rbl['zone'], DNS_SOA)) {
                    if ($result = gethostbyname($lookup)) {
                        if($result != $lookup) {

                            $outReport = array(
                                'source'=>$source,
                                'ip'=>$ip,
                                'class'=>'RBL Listed',
                                'type'=>'INFO',
                                'timestamp'=>time(),
                                'information'=> array(
							'List' => $rbl['name'],
                                                      	'Return code' => $result,
                                                     )
                            );

                            if (!reportAdd($outReport)) {
                                logger(LOG_DEBUG, "RBLSCANNER CLI died with: " . implode(",", $outReport));
                                die('error adding report'.PHP_EOL);
                            }
                        }
                    }
                }
            }
        }
    }
}
logger(LOG_DEBUG, "RBLSCANNER CLI completed");
?>
