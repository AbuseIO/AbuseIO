#!/usr/bin/php
<?php
/******************************************************************************
* AbuseIO 3.0
* Copyright (C) 2015 AbuseIO Development Team (http://abuse.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
*******************************************************************************
*
* The MDA functions will handle the interactions between a delevering MTA and
* the AbuseIO core. It uses a general MDA parser to process the received e-mail
* in combination with a parser- and body map to call the required parser
*
* Usage: cat(pipe) a valid EML formatted e-mail to the MDA to parse the e-mail
*
******************************************************************************/

include (realpath(dirname(__FILE__))."/../lib/core/loader.php");

$message = receive_mail(array('type' => 'EXTERNAL'));

// Sanity checks
if(empty($message['from'])) {
    delete_store($message);
    bounce($message);
}

// Ignore email from our own notification address to prevent mail loops
if (preg_match('/'.NOTIFICATIONS_FROM_ADDRESS.'/', $message['from'])) {
    delete_store($message);
    logger(LOG_WARNING, "Loop prevention: Ignoring email from self (" . NOTIFICATIONS_FROM_ADDRESS . ")");
    exit(0);
}

// Maps regular expressions to match from address to the corresponding parser
$parserMap = array(
    '/autoreports@shadowserver.org/'        => 'shadowserver',
    '/noreply@google.com/'                  => 'google',
    '/summaries@admin.spamcop.net/'         => 'spamcop',
    '/@reports.spamcop.net/'                => 'spamcop',
    '/autogenerated@blocklist.de/'          => 'blocklist_de',
    '/@ip-echelon.(com|us)/'                => 'ip_echelon',
    '/@copyright-compliance.com/'           => 'copyright_compliance',
    '/monitor-bounce@projecthoneypot.org/'  => 'project_honeypot',
    '/@junkemailfilter.com/'                => 'junkemailfilter_com',
    '/@r.iecc.com/'                         => 'iecc_com',
    '/abuse@clean-mx.de/'                   => 'cleanmx_de',
    '/@USGOabuse.net/'                      => 'usgoabuse',
    '/abuse-auto@support.(juno|netzero).com/' => 'uol',
    '/abuse-reports@cyscon.de/'             => 'cyscon',
    '/takedown-response.*@netcraft.com/'    => 'netcraft',
    '/noreply@spamlogin.com/'               => 'spamexperts',
    '/reports@reports.abusehub.nl/'         => 'abusehub',
    '/@abuse-reporting.webiron.com/'        => 'webiron',
    '/@mailpit.powerweb.de/'                => 'dnsbl_de',
    '/dmca@cegtek.com/'                     => 'cegtek',
    '/nobody@woody.ch/'                     => 'woody_ch',
    '/scomp@aol.net/'                       => 'feedbackloop',
    '/feedbackloop@feedback.bluetie.com/'   => 'feedbackloop',
    '/feedbackloop@comcastfbl.senderscore.net/' => 'feedbackloop',
    '/feedbackloop@fbl.senderscore.net/'    => 'feedbackloop',
    '/feedbackloop@fbl.cox.net/'            => 'feedbackloop',
    '/feedbackloop@fbl.fastmail.com/'       => 'feedbackloop',
    '/feedbackloop@fbl.hostedemail.com/'    => 'feedbackloop',
    '/feedbackloop@fbl.apps.rackspace.com/' => 'feedbackloop',
    '/feedbackloop@feedback.postmaster.rr.com/' => 'feedbackloop',
    '/feedbackloop@fbl.synacor.com/'        => 'feedbackloop',
    '/feedbackloop@fbl.usa.net/'            => 'feedbackloop',
    '/feedbackloop@fbl.zoho.com/'           => 'feedbackloop',
    '/feedback@arf.mail.yahoo.com/'         => 'feedbackloop',
    '/feedbackloop@fbl.xs4all.net/'         => 'feedbackloop',
);

// Maps regular expressions to match body to the corresponding parser in case from matching failed
$bodyMap = array(
    '/User-Agent: Spampanel/'               => 'spamexperts',
    '/User-Agent: SpamExperts/'             => 'spamexperts',
);

// Fast detect parser
foreach ($parserMap as $regex => $p) {
    if (preg_match($regex, $message['from'])) {
        $parser = $p;
        break;
    }
}

// Slow detect parser
if (empty($parser)) {
    foreach ($bodyMap as $regex => $p) {
        if (preg_match($regex, $message['raw'])) {
            $parser = $p;
            break;
        }
    }
}

// If we don't have a static parser
if (empty($parser)) {
    // TODO - try a generic ARF parser

    // } else {
    delete_store($message);
    bounce($message);
}

// Import the parser
logger(LOG_DEBUG, "Received a report - starting $parser parser");
require_once(APP."/lib/parsers/$parser.php");
$parser_func = "parse_$parser";
if ($parser_func($message)) {
    delete_store($message);
    exit(0);
} else {
    bounce($message);
}

?>
