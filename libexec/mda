#!/usr/bin/php
<?php
include (realpath(dirname(__FILE__))."/../lib/core/loader.php");

$message = receive_mail(array('type' => 'EXTERNAL'));

// Sanity checks
if(empty($message['from']) || empty($message['body'])) {
    delete_store($message);
    bounce($message);
}

// Ignore email from our own notification address to prevent mail loops
if (preg_match('/'.NOTIFICATIONS_FROM_ADDRESS.'/', $message['from'])) {
    delete_store($message);
    logger(LOG_WARNING, "Loop prevention: Ignoring email from self (" . NOTIFICATIONS_FROM_ADDRESS . ")");
    exit(0);
}

// Maps regular expressions to match from address to the corresponding parser
$parserMap = array(
    '/autoreports@shadowserver.org/'        => 'shadowserver',
    '/noreply@google.com/'                  => 'google',
    '/summaries@admin.spamcop.net/'         => 'spamcop',
    '/@reports.spamcop.net/'                => 'spamcop',
    '/autogenerated@blocklist.de/'          => 'blocklist_de',
    '/@ip-echelon.com/'                     => 'ip_echelon',
    '/monitor-bounce@projecthoneypot.org/'  => 'project_honeypot',
    '/@junkemailfilter.com/'                => 'junkemailfilter_com',
    '/abuse@clean-mx.de/'                   => 'cleanmx_de',
    '/@USGOabuse.net/'                      => 'usgoabuse',
    '/abuse-reports@cyscon.de/'             => 'cyscon',
    '/takedown-response.*@netcraft.com/'    => 'netcraft',
    '/noreply@spamlogin.com/'               => 'spamexperts',
);

// Maps regular expressions to match body to the corresponding parser in case from matching failed
$bodyMap = array(
    '/User-Agent: Spampanel/'               => 'spamexperts',
    '/User-Agent: SpamExperts/'             => 'spamexperts',
);

// Fast detect parser
foreach ($parserMap as $regex => $p) {
    if (preg_match($regex, $message['from'])) {
        $parser = $p;
        break;
    }
}

// Slow detect parser
if (empty($parser)) {
    foreach ($bodyMap as $regex => $p) {
        if (preg_match($regex, $message['raw'])) {
            $parser = $p;
            break;
        }
    }
}

// If we don't have a static parser
if (empty($parser)) {
    // TODO - try a generic ARF parser

    // } else {
    delete_store($message);
    bounce($message);
}

// Import the parser
logger(LOG_DEBUG, "Received a report - starting $parser parser");
require_once(APP."/lib/parsers/$parser.php");
$parser_func = "parse_$parser";
if ($parser_func($message)) {
    delete_store($message);
    exit(0);
} else {
    bounce($message);
}

function bounce($message) {
    logger(LOG_WARNING, "Attempting to bounce message to admin because i was unabled to parse it");

    $tempfile = "/tmp/" . mt_rand();
    file_put_contents($tempfile, $message['raw']);

    $bodytext  = "AbuseIO tried to parse a message, however was not able to.\n";
    if(!empty($message['from'])) {
        $bodytext .= "\nfrom: ${message['from']}\n";
    }
    if(!empty($message['subject'])) {
        $bodytext .= "\nsubject: ${message['subject']}\n";
    }
    $bodytext .= "\nYou will find the EML attached.\n";

    $email = new PHPMailer();
    $email->From      = NOTIFICATIONS_FROM_ADDRESS;
    $email->FromName  = NOTIFICATIONS_FROM_NAME;
    $email->Subject   = 'AbuseIO failed parsing attempt';
    $email->Body      = $bodytext;
    $email->AddAddress( FALLBACK_MAIL );


    $file_to_attach = 'PATH_OF_YOUR_FILE_HERE';

    $email->AddAttachment( $tempfile , 'bounce.eml' );

    if(!$email->Send()) {
        logger(LOG_ERR, "Bouncing to " . FALLBACK_MAIL . " failed.");
        exit(1);

    } else {
        logger(LOG_WARNING, "Bounced to " . FALLBACK_MAIL . " successfully.");
        exit(0);

    }
}

?>
